// Generated by Haxe 3.4.7
package haxe.xml;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class Printer extends haxe.lang.HxObject
{
	public Printer(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public Printer(boolean pretty)
	{
		//line 44 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		haxe.xml.Printer.__hx_ctor_haxe_xml_Printer(this, pretty);
	}
	
	
	public static void __hx_ctor_haxe_xml_Printer(haxe.xml.Printer __hx_this, boolean pretty)
	{
		//line 45 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		__hx_this.output = new haxe.root.StringBuf();
		//line 46 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		__hx_this.pretty = pretty;
	}
	
	
	public static java.lang.String print(haxe.root.Xml xml, java.lang.Object pretty)
	{
		//line 35 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		java.lang.Object __temp_pretty3 = ( (haxe.lang.Runtime.eq(pretty, null)) ? (((java.lang.Object) (false) )) : (pretty) );
		//line 36 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		haxe.xml.Printer printer = new haxe.xml.Printer(haxe.lang.Runtime.toBool(__temp_pretty3));
		//line 37 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		printer.writeNode(xml, "");
		//line 38 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		return printer.output.toString();
	}
	
	
	public haxe.root.StringBuf output;
	
	public boolean pretty;
	
	public void writeNode(haxe.root.Xml value, java.lang.String tabs)
	{
		//line 50 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		int _g = value.nodeType;
		//line 50 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		switch (_g)
		{
			case 0:
			{
				//line 68 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				this.output.add(haxe.lang.Runtime.toString(( tabs + "<" )));
				//line 69 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				{
					//line 69 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (( value.nodeType != haxe.root.Xml.Element )) 
					{
						//line 69 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						throw haxe.lang.HaxeException.wrap(( "Bad node type, expected Element but found " + value.nodeType ));
					}
					
					//line 69 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString(value.nodeName));
				}
				
				//line 70 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				{
					//line 70 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					java.lang.Object attribute = value.attributes();
					//line 70 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(attribute, "hasNext", null)))
					{
						//line 70 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						java.lang.String attribute1 = haxe.lang.Runtime.toString(haxe.lang.Runtime.callField(attribute, "next", null));
						//line 71 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						this.output.add(haxe.lang.Runtime.toString(( ( " " + attribute1 ) + "=\"" )));
						//line 72 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						{
							//line 72 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
							java.lang.String input = haxe.root.StringTools.htmlEscape(value.get(attribute1), true);
							//line 72 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
							this.output.add(haxe.lang.Runtime.toString(input));
						}
						
						//line 73 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						this.output.add(haxe.lang.Runtime.toString("\""));
					}
					
				}
				
				//line 75 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				if (this.hasChildren(value)) 
				{
					//line 76 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString(">"));
					//line 77 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (this.pretty) 
					{
						//line 77 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						this.output.add(haxe.lang.Runtime.toString("\n"));
					}
					
					//line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					{
						//line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						if (( ( value.nodeType != haxe.root.Xml.Document ) && ( value.nodeType != haxe.root.Xml.Element ) )) 
						{
							//line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
							throw haxe.lang.HaxeException.wrap(( "Bad node type, expected Element or Document but found " + value.nodeType ));
						}
						
						//line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						java.lang.Object child = ((java.lang.Object) (new _Array.ArrayIterator<haxe.root.Xml>(((haxe.root.Array<haxe.root.Xml>) (value.children) ))) );
						//line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(child, "hasNext", null)))
						{
							//line 78 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
							haxe.root.Xml child1 = ((haxe.root.Xml) (haxe.lang.Runtime.callField(child, "next", null)) );
							//line 79 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
							this.writeNode(child1, ( (this.pretty) ? (( tabs + "\t" )) : (tabs) ));
						}
						
					}
					
					//line 81 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString(( tabs + "</" )));
					//line 82 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					{
						//line 82 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						if (( value.nodeType != haxe.root.Xml.Element )) 
						{
							//line 82 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
							throw haxe.lang.HaxeException.wrap(( "Bad node type, expected Element but found " + value.nodeType ));
						}
						
						//line 82 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						this.output.add(haxe.lang.Runtime.toString(value.nodeName));
					}
					
					//line 83 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString(">"));
					//line 84 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (this.pretty) 
					{
						//line 84 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						this.output.add(haxe.lang.Runtime.toString("\n"));
					}
					
				}
				else
				{
					//line 86 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString("/>"));
					//line 87 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (this.pretty) 
					{
						//line 87 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						this.output.add(haxe.lang.Runtime.toString("\n"));
					}
					
				}
				
				//line 67 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				break;
			}
			
			
			case 1:
			{
				//line 90 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				if (( ( value.nodeType == haxe.root.Xml.Document ) || ( value.nodeType == haxe.root.Xml.Element ) )) 
				{
					//line 90 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					throw haxe.lang.HaxeException.wrap(( "Bad node type, unexpected " + value.nodeType ));
				}
				
				//line 90 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				java.lang.String nodeValue = value.nodeValue;
				//line 91 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				if (( nodeValue.length() != 0 )) 
				{
					//line 92 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					{
						//line 92 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						java.lang.String input1 = ( tabs + haxe.root.StringTools.htmlEscape(nodeValue, null) );
						//line 92 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						this.output.add(haxe.lang.Runtime.toString(input1));
					}
					
					//line 93 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (this.pretty) 
					{
						//line 93 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						this.output.add(haxe.lang.Runtime.toString("\n"));
					}
					
				}
				
				//line 89 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				break;
			}
			
			
			case 2:
			{
				//line 52 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				this.output.add(haxe.lang.Runtime.toString(( tabs + "<![CDATA[" )));
				//line 53 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				{
					//line 53 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (( ( value.nodeType == haxe.root.Xml.Document ) || ( value.nodeType == haxe.root.Xml.Element ) )) 
					{
						//line 53 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						throw haxe.lang.HaxeException.wrap(( "Bad node type, unexpected " + value.nodeType ));
					}
					
					//line 53 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					java.lang.String input2 = value.nodeValue.trim();
					//line 53 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString(input2));
				}
				
				//line 54 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				this.output.add(haxe.lang.Runtime.toString("]]>"));
				//line 55 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				if (this.pretty) 
				{
					//line 55 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString("\n"));
				}
				
				//line 51 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				break;
			}
			
			
			case 3:
			{
				//line 57 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				if (( ( value.nodeType == haxe.root.Xml.Document ) || ( value.nodeType == haxe.root.Xml.Element ) )) 
				{
					//line 57 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					throw haxe.lang.HaxeException.wrap(( "Bad node type, unexpected " + value.nodeType ));
				}
				
				//line 57 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				java.lang.String commentContent = value.nodeValue;
				//line 58 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				commentContent = new haxe.root.EReg("[\n\r\t]+", "g").replace(commentContent, "");
				//line 59 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				commentContent = ( ( "<!--" + commentContent ) + "-->" );
				//line 60 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				this.output.add(haxe.lang.Runtime.toString(tabs));
				//line 61 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				{
					//line 61 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					java.lang.String input3 = commentContent.trim();
					//line 61 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString(input3));
				}
				
				//line 62 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				if (this.pretty) 
				{
					//line 62 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString("\n"));
				}
				
				//line 56 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				break;
			}
			
			
			case 4:
			{
				//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				{
					//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (( ( value.nodeType == haxe.root.Xml.Document ) || ( value.nodeType == haxe.root.Xml.Element ) )) 
					{
						//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						throw haxe.lang.HaxeException.wrap(( "Bad node type, unexpected " + value.nodeType ));
					}
					
					//line 99 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString(( ( "<!DOCTYPE " + value.nodeValue ) + ">" )));
				}
				
				//line 100 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				if (this.pretty) 
				{
					//line 100 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString("\n"));
				}
				
				//line 98 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				break;
			}
			
			
			case 5:
			{
				//line 96 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				{
					//line 96 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (( ( value.nodeType == haxe.root.Xml.Document ) || ( value.nodeType == haxe.root.Xml.Element ) )) 
					{
						//line 96 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						throw haxe.lang.HaxeException.wrap(( "Bad node type, unexpected " + value.nodeType ));
					}
					
					//line 96 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString(( ( "<?" + value.nodeValue ) + "?>" )));
				}
				
				//line 97 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				if (this.pretty) 
				{
					//line 97 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.output.add(haxe.lang.Runtime.toString("\n"));
				}
				
				//line 95 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				break;
			}
			
			
			case 6:
			{
				//line 64 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				if (( ( value.nodeType != haxe.root.Xml.Document ) && ( value.nodeType != haxe.root.Xml.Element ) )) 
				{
					//line 64 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					throw haxe.lang.HaxeException.wrap(( "Bad node type, expected Element or Document but found " + value.nodeType ));
				}
				
				//line 64 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				java.lang.Object child2 = ((java.lang.Object) (new _Array.ArrayIterator<haxe.root.Xml>(((haxe.root.Array<haxe.root.Xml>) (value.children) ))) );
				//line 64 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(child2, "hasNext", null)))
				{
					//line 64 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					haxe.root.Xml child3 = ((haxe.root.Xml) (haxe.lang.Runtime.callField(child2, "next", null)) );
					//line 65 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					this.writeNode(child3, tabs);
				}
				
				//line 64 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				break;
			}
			
			
		}
		
	}
	
	
	public boolean hasChildren(haxe.root.Xml value)
	{
		//line 115 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		{
			//line 115 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			if (( ( value.nodeType != haxe.root.Xml.Document ) && ( value.nodeType != haxe.root.Xml.Element ) )) 
			{
				//line 115 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				throw haxe.lang.HaxeException.wrap(( "Bad node type, expected Element or Document but found " + value.nodeType ));
			}
			
			//line 115 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			java.lang.Object child = ((java.lang.Object) (new _Array.ArrayIterator<haxe.root.Xml>(((haxe.root.Array<haxe.root.Xml>) (value.children) ))) );
			//line 115 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			while (haxe.lang.Runtime.toBool(haxe.lang.Runtime.callField(child, "hasNext", null)))
			{
				//line 115 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				haxe.root.Xml child1 = ((haxe.root.Xml) (haxe.lang.Runtime.callField(child, "next", null)) );
				//line 116 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				{
					//line 116 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					int _g = child1.nodeType;
					//line 116 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					switch (_g)
					{
						case 0:
						case 1:
						{
							//line 118 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
							return true;
						}
						
						
						case 2:
						case 3:
						{
							//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
							if (( ( child1.nodeType == haxe.root.Xml.Document ) || ( child1.nodeType == haxe.root.Xml.Element ) )) 
							{
								//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
								throw haxe.lang.HaxeException.wrap(( "Bad node type, unexpected " + child1.nodeType ));
							}
							
							//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
							if (( haxe.root.StringTools.ltrim(child1.nodeValue).length() != 0 )) 
							{
								//line 121 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
								return true;
							}
							
							//line 120 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
							break;
						}
						
						
						default:
						{
							//line 123 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
							break;
						}
						
					}
					
				}
				
			}
			
		}
		
		//line 126 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		return false;
	}
	
	
	@Override public java.lang.Object __hx_setField(java.lang.String field, java.lang.Object value, boolean handleProperties)
	{
		//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		{
			//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			boolean __temp_executeDef1 = true;
			//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			switch (field.hashCode())
			{
				case -980096906:
				{
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (field.equals("pretty")) 
					{
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						__temp_executeDef1 = false;
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						this.pretty = haxe.lang.Runtime.toBool(value);
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						return value;
					}
					
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					break;
				}
				
				
				case -1005512447:
				{
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (field.equals("output")) 
					{
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						__temp_executeDef1 = false;
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						this.output = ((haxe.root.StringBuf) (value) );
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						return value;
					}
					
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					break;
				}
				
				
			}
			
			//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			if (__temp_executeDef1) 
			{
				//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				return super.__hx_setField(field, value, handleProperties);
			}
			else
			{
				//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_getField(java.lang.String field, boolean throwErrors, boolean isCheck, boolean handleProperties)
	{
		//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		{
			//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			boolean __temp_executeDef1 = true;
			//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			switch (field.hashCode())
			{
				case 239016633:
				{
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (field.equals("hasChildren")) 
					{
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						__temp_executeDef1 = false;
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "hasChildren")) );
					}
					
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					break;
				}
				
				
				case -1005512447:
				{
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (field.equals("output")) 
					{
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						__temp_executeDef1 = false;
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						return this.output;
					}
					
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					break;
				}
				
				
				case -1406504319:
				{
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (field.equals("writeNode")) 
					{
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						__temp_executeDef1 = false;
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						return ((haxe.lang.Function) (new haxe.lang.Closure(this, "writeNode")) );
					}
					
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					break;
				}
				
				
				case -980096906:
				{
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (field.equals("pretty")) 
					{
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						__temp_executeDef1 = false;
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						return this.pretty;
					}
					
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					break;
				}
				
				
			}
			
			//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			if (__temp_executeDef1) 
			{
				//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				return super.__hx_getField(field, throwErrors, isCheck, handleProperties);
			}
			else
			{
				//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				throw null;
			}
			
		}
		
	}
	
	
	@Override public java.lang.Object __hx_invokeField(java.lang.String field, haxe.root.Array dynargs)
	{
		//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		{
			//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			boolean __temp_executeDef1 = true;
			//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			switch (field.hashCode())
			{
				case 239016633:
				{
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (field.equals("hasChildren")) 
					{
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						__temp_executeDef1 = false;
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						return this.hasChildren(((haxe.root.Xml) (dynargs.__get(0)) ));
					}
					
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					break;
				}
				
				
				case -1406504319:
				{
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					if (field.equals("writeNode")) 
					{
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						__temp_executeDef1 = false;
						//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
						this.writeNode(((haxe.root.Xml) (dynargs.__get(0)) ), haxe.lang.Runtime.toString(dynargs.__get(1)));
					}
					
					//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
					break;
				}
				
				
			}
			
			//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
			if (__temp_executeDef1) 
			{
				//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
				return super.__hx_invokeField(field, dynargs);
			}
			
		}
		
		//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		return null;
	}
	
	
	@Override public void __hx_getFields(haxe.root.Array<java.lang.String> baseArr)
	{
		//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		baseArr.push("pretty");
		//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		baseArr.push("output");
		//line 29 "C:\\HaxeToolkit\\haxe\\std\\haxe\\xml\\Printer.hx"
		super.__hx_getFields(baseArr);
	}
	
	
}


