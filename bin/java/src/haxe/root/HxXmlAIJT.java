// Generated by Haxe 3.4.7
package haxe.root;

import haxe.root.*;

@SuppressWarnings(value={"rawtypes", "unchecked"})
public class HxXmlAIJT extends haxe.lang.HxObject
{
	public HxXmlAIJT(haxe.lang.EmptyObject empty)
	{
	}
	
	
	public HxXmlAIJT()
	{
		//line 3 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
		haxe.root.HxXmlAIJT.__hx_ctor__HxXmlAIJT(this);
	}
	
	
	public static void __hx_ctor__HxXmlAIJT(haxe.root.HxXmlAIJT __hx_this)
	{
	}
	
	
	public static haxe.root.Xml out;
	
	public static void genOut()
	{
		//line 8 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
		haxe.root.HxXmlAIJT.out = haxe.root.Xml.createElement("Query");
	}
	
	
	public static void convertArray(haxe.root.Array input)
	{
		//line 13 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
		haxe.root.Xml joinTable = haxe.root.Xml.createElement("JT");
		//line 14 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
		{
			//line 14 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
			int _g1 = 0;
			//line 14 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
			int _g = input.length;
			//line 14 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
			while (( _g1 < _g ))
			{
				//line 14 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
				int i = _g1++;
				//line 16 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
				haxe.root.Xml pk = null;
				//line 17 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
				pk = haxe.root.Xml.parse("<jr></jr>").firstElement();
				//line 17 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
				pk.set("index", haxe.root.Std.string(i));
				//line 18 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
				{
					//line 18 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
					if (( ( pk.nodeType != haxe.root.Xml.Document ) && ( pk.nodeType != haxe.root.Xml.Element ) )) 
					{
						//line 18 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
						throw haxe.lang.HaxeException.wrap(( "Bad node type, expected Element or Document but found " + pk.nodeType ));
					}
					
					//line 18 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
					haxe.root.Xml _this = pk.children.__get(0);
					//line 18 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
					java.lang.String v = haxe.root.Std.string(input.__get(i));
					//line 18 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
					if (( ( _this.nodeType == haxe.root.Xml.Document ) || ( _this.nodeType == haxe.root.Xml.Element ) )) 
					{
						//line 18 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
						throw haxe.lang.HaxeException.wrap(( "Bad node type, unexpected " + _this.nodeType ));
					}
					
					//line 18 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
					_this.nodeValue = v;
				}
				
				//line 19 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
				joinTable.addChild(pk);
			}
			
		}
		
		//line 21 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
		haxe.root.Xml xmlData = null;
		//line 22 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
		xmlData = haxe.root.Xml.createElement("XmlData");
		//line 22 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
		xmlData.addChild(joinTable);
		//line 23 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
		haxe.root.HxXmlAIJT.out.addChild(xmlData);
	}
	
	
	public static haxe.root.Xml run(haxe.root.Array input)
	{
		//line 28 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
		haxe.root.HxXmlAIJT.genOut();
		//line 29 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
		haxe.root.HxXmlAIJT.convertArray(input);
		//line 30 "C:\\Haxe Projects\\hxXmlAIJT\\src\\HxXmlAIJT.hx"
		return haxe.root.HxXmlAIJT.out;
	}
	
	
}


