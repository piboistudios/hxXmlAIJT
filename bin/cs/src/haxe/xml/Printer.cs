// Generated by Haxe 3.4.7

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.xml {
	public class Printer : global::haxe.lang.HxObject {
		
		public Printer(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Printer(bool pretty) {
			global::haxe.xml.Printer.__hx_ctor_haxe_xml_Printer(this, pretty);
		}
		
		
		public static void __hx_ctor_haxe_xml_Printer(global::haxe.xml.Printer __hx_this, bool pretty) {
			__hx_this.output = new global::StringBuf();
			__hx_this.pretty = pretty;
		}
		
		
		public static string print(global::Xml xml, global::haxe.lang.Null<bool> pretty) {
			global::haxe.lang.Null<bool> __temp_pretty9 = ( ( ! (pretty.hasValue) ) ? (new global::haxe.lang.Null<bool>(false, true)) : (pretty) );
			global::haxe.xml.Printer printer = new global::haxe.xml.Printer((__temp_pretty9).@value);
			printer.writeNode(xml, "");
			return printer.output.b.ToString();
		}
		
		
		public global::StringBuf output;
		
		public bool pretty;
		
		public virtual void writeNode(global::Xml @value, string tabs) {
			unchecked {
				int _g = @value.nodeType;
				switch (_g) {
					case 0:
					{
						this.output.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(tabs, "<"))) ));
						{
							if (( @value.nodeType != global::Xml.Element )) {
								throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::haxe.lang.Runtime.toString(@value.nodeType)));
							}
							
							this.output.b.Append(((string) (global::Std.@string(@value.nodeName)) ));
						}
						
						{
							object attribute = @value.attributes();
							while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(attribute, "hasNext", 407283053, null))) {
								string attribute1 = global::haxe.lang.Runtime.toString(global::haxe.lang.Runtime.callField(attribute, "next", 1224901875, null));
								this.output.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(" ", attribute1), "=\""))) ));
								{
									string input = global::StringTools.htmlEscape(@value.@get(attribute1), new global::haxe.lang.Null<bool>(true, true));
									this.output.b.Append(((string) (global::Std.@string(input)) ));
								}
								
								this.output.b.Append(((string) ("\"") ));
							}
							
						}
						
						if (this.hasChildren(@value)) {
							this.output.b.Append(((string) (">") ));
							if (this.pretty) {
								this.output.b.Append(((string) ("\n") ));
							}
							
							{
								if (( ( @value.nodeType != global::Xml.Document ) && ( @value.nodeType != global::Xml.Element ) )) {
									throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::haxe.lang.Runtime.toString(@value.nodeType)));
								}
								
								object child = ((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (@value.children) ))) );
								while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(child, "hasNext", 407283053, null))) {
									global::Xml child1 = ((global::Xml) (global::haxe.lang.Runtime.callField(child, "next", 1224901875, null)) );
									this.writeNode(child1, ( (this.pretty) ? (global::haxe.lang.Runtime.concat(tabs, "\t")) : (tabs) ));
								}
								
							}
							
							this.output.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(tabs, "</"))) ));
							{
								if (( @value.nodeType != global::Xml.Element )) {
									throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::haxe.lang.Runtime.toString(@value.nodeType)));
								}
								
								this.output.b.Append(((string) (global::Std.@string(@value.nodeName)) ));
							}
							
							this.output.b.Append(((string) (">") ));
							if (this.pretty) {
								this.output.b.Append(((string) ("\n") ));
							}
							
						}
						else {
							this.output.b.Append(((string) ("/>") ));
							if (this.pretty) {
								this.output.b.Append(((string) ("\n") ));
							}
							
						}
						
						break;
					}
					
					
					case 1:
					{
						if (( ( @value.nodeType == global::Xml.Document ) || ( @value.nodeType == global::Xml.Element ) )) {
							throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::haxe.lang.Runtime.toString(@value.nodeType)));
						}
						
						string nodeValue = @value.nodeValue;
						if (( nodeValue.Length != 0 )) {
							{
								string input1 = global::haxe.lang.Runtime.concat(tabs, global::StringTools.htmlEscape(nodeValue, default(global::haxe.lang.Null<bool>)));
								this.output.b.Append(((string) (global::Std.@string(input1)) ));
							}
							
							if (this.pretty) {
								this.output.b.Append(((string) ("\n") ));
							}
							
						}
						
						break;
					}
					
					
					case 2:
					{
						this.output.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(tabs, "<![CDATA["))) ));
						{
							if (( ( @value.nodeType == global::Xml.Document ) || ( @value.nodeType == global::Xml.Element ) )) {
								throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::haxe.lang.Runtime.toString(@value.nodeType)));
							}
							
							string input2 = @value.nodeValue.Trim();
							this.output.b.Append(((string) (global::Std.@string(input2)) ));
						}
						
						this.output.b.Append(((string) ("]]>") ));
						if (this.pretty) {
							this.output.b.Append(((string) ("\n") ));
						}
						
						break;
					}
					
					
					case 3:
					{
						if (( ( @value.nodeType == global::Xml.Document ) || ( @value.nodeType == global::Xml.Element ) )) {
							throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::haxe.lang.Runtime.toString(@value.nodeType)));
						}
						
						string commentContent = @value.nodeValue;
						commentContent = new global::EReg("[\n\r\t]+", "g").replace(commentContent, "");
						commentContent = global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<!--", commentContent), "-->");
						this.output.b.Append(((string) (global::Std.@string(tabs)) ));
						{
							string input3 = commentContent.Trim();
							this.output.b.Append(((string) (global::Std.@string(input3)) ));
						}
						
						if (this.pretty) {
							this.output.b.Append(((string) ("\n") ));
						}
						
						break;
					}
					
					
					case 4:
					{
						{
							if (( ( @value.nodeType == global::Xml.Document ) || ( @value.nodeType == global::Xml.Element ) )) {
								throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::haxe.lang.Runtime.toString(@value.nodeType)));
							}
							
							this.output.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<!DOCTYPE ", @value.nodeValue), ">"))) ));
						}
						
						if (this.pretty) {
							this.output.b.Append(((string) ("\n") ));
						}
						
						break;
					}
					
					
					case 5:
					{
						{
							if (( ( @value.nodeType == global::Xml.Document ) || ( @value.nodeType == global::Xml.Element ) )) {
								throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::haxe.lang.Runtime.toString(@value.nodeType)));
							}
							
							this.output.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("<?", @value.nodeValue), "?>"))) ));
						}
						
						if (this.pretty) {
							this.output.b.Append(((string) ("\n") ));
						}
						
						break;
					}
					
					
					case 6:
					{
						if (( ( @value.nodeType != global::Xml.Document ) && ( @value.nodeType != global::Xml.Element ) )) {
							throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::haxe.lang.Runtime.toString(@value.nodeType)));
						}
						
						object child2 = ((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (@value.children) ))) );
						while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(child2, "hasNext", 407283053, null))) {
							global::Xml child3 = ((global::Xml) (global::haxe.lang.Runtime.callField(child2, "next", 1224901875, null)) );
							this.writeNode(child3, tabs);
						}
						
						break;
					}
					
					
				}
				
			}
		}
		
		
		public virtual bool hasChildren(global::Xml @value) {
			unchecked {
				{
					if (( ( @value.nodeType != global::Xml.Document ) && ( @value.nodeType != global::Xml.Element ) )) {
						throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::haxe.lang.Runtime.toString(@value.nodeType)));
					}
					
					object child = ((object) (new global::_Array.ArrayIterator<object>(((global::Array<object>) (@value.children) ))) );
					while (global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(child, "hasNext", 407283053, null))) {
						global::Xml child1 = ((global::Xml) (global::haxe.lang.Runtime.callField(child, "next", 1224901875, null)) );
						{
							int _g = child1.nodeType;
							switch (_g) {
								case 0:
								case 1:
								{
									return true;
								}
								
								
								case 2:
								case 3:
								{
									if (( ( child1.nodeType == global::Xml.Document ) || ( child1.nodeType == global::Xml.Element ) )) {
										throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::haxe.lang.Runtime.toString(child1.nodeType)));
									}
									
									if (( child1.nodeValue.TrimStart().Length != 0 )) {
										return true;
									}
									
									break;
								}
								
								
								default:
								{
									break;
								}
								
							}
							
						}
						
					}
					
				}
				
				return false;
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 784433846:
					{
						this.pretty = global::haxe.lang.Runtime.toBool(@value);
						return @value;
					}
					
					
					case 209784577:
					{
						this.output = ((global::StringBuf) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1126235833:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "hasChildren", 1126235833)) );
					}
					
					
					case 1371405953:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "writeNode", 1371405953)) );
					}
					
					
					case 784433846:
					{
						return this.pretty;
					}
					
					
					case 209784577:
					{
						return this.output;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 1126235833:
					{
						return this.hasChildren(((global::Xml) (dynargs[0]) ));
					}
					
					
					case 1371405953:
					{
						this.writeNode(((global::Xml) (dynargs[0]) ), global::haxe.lang.Runtime.toString(dynargs[1]));
						break;
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				return null;
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("pretty");
			baseArr.push("output");
			base.__hx_getFields(baseArr);
		}
		
		
	}
}


