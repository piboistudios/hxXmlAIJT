// Generated by Haxe 3.4.7

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.xml {
	public class XmlParserException : global::haxe.lang.HxObject {
		
		public XmlParserException(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public XmlParserException(string message, string xml, int position) {
			global::haxe.xml.XmlParserException.__hx_ctor_haxe_xml_XmlParserException(this, message, xml, position);
		}
		
		
		public static void __hx_ctor_haxe_xml_XmlParserException(global::haxe.xml.XmlParserException __hx_this, string message, string xml, int position) {
			unchecked {
				__hx_this.xml = xml;
				__hx_this.message = message;
				__hx_this.position = position;
				__hx_this.lineNumber = 1;
				__hx_this.positionAtLine = 0;
				{
					int _g1 = 0;
					int _g = position;
					while (( _g1 < _g )) {
						int i = _g1++;
						int c = ( (((bool) (( ((uint) (i) ) < xml.Length )) )) ? (((int) (xml[i]) )) : (-1) );
						if (( c == 10 )) {
							__hx_this.lineNumber++;
							__hx_this.positionAtLine = 0;
						}
						else if (( c != 13 )) {
							__hx_this.positionAtLine++;
						}
						
					}
					
				}
				
			}
		}
		
		
		public string message;
		
		public int lineNumber;
		
		public int positionAtLine;
		
		public int position;
		
		public string xml;
		
		public virtual string toString() {
			return global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::Type.getClassName(global::Type.getClass<object>(((object) (this) ))), ": "), this.message), " at line "), global::haxe.lang.Runtime.toString(this.lineNumber)), " char "), global::haxe.lang.Runtime.toString(this.positionAtLine));
		}
		
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1257939113:
					{
						this.position = ((int) (@value) );
						return @value;
					}
					
					
					case 446171152:
					{
						this.positionAtLine = ((int) (@value) );
						return @value;
					}
					
					
					case 1981972957:
					{
						this.lineNumber = ((int) (@value) );
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 5991895:
					{
						this.xml = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					case 1257939113:
					{
						this.position = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 446171152:
					{
						this.positionAtLine = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 1981972957:
					{
						this.lineNumber = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
						return @value;
					}
					
					
					case 437335495:
					{
						this.message = global::haxe.lang.Runtime.toString(@value);
						return @value;
					}
					
					
					default:
					{
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
					}
					
					
					case 5991895:
					{
						return this.xml;
					}
					
					
					case 1257939113:
					{
						return this.position;
					}
					
					
					case 446171152:
					{
						return this.positionAtLine;
					}
					
					
					case 1981972957:
					{
						return this.lineNumber;
					}
					
					
					case 437335495:
					{
						return this.message;
					}
					
					
					default:
					{
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				switch (hash) {
					case 1257939113:
					{
						return ((double) (this.position) );
					}
					
					
					case 446171152:
					{
						return ((double) (this.positionAtLine) );
					}
					
					
					case 1981972957:
					{
						return ((double) (this.lineNumber) );
					}
					
					
					default:
					{
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
		}
		
		
		public override object __hx_invokeField(string field, int hash, global::Array dynargs) {
			unchecked {
				switch (hash) {
					case 946786476:
					{
						return this.toString();
					}
					
					
					default:
					{
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
		}
		
		
		public override void __hx_getFields(global::Array<object> baseArr) {
			baseArr.push("xml");
			baseArr.push("position");
			baseArr.push("positionAtLine");
			baseArr.push("lineNumber");
			baseArr.push("message");
			base.__hx_getFields(baseArr);
		}
		
		
		public override string ToString(){
			return this.toString();
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.xml {
	public class Parser : global::haxe.lang.HxObject {
		
		static Parser() {
			object __temp_stmt2 = null;
			{
				global::haxe.ds.StringMap<object> h = new global::haxe.ds.StringMap<object>();
				h.@set("lt", "<");
				h.@set("gt", ">");
				h.@set("amp", "&");
				h.@set("quot", "\"");
				h.@set("apos", "\'");
				__temp_stmt2 = h;
			}
			
			object __temp_stmt1 = global::haxe.ds.StringMap<object>.__hx_cast<object>(((global::haxe.ds.StringMap) (__temp_stmt2) ));
			global::haxe.xml.Parser.escapes = ((global::haxe.ds.StringMap<object>) (__temp_stmt1) );
		}
		
		
		public Parser(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Parser() {
			global::haxe.xml.Parser.__hx_ctor_haxe_xml_Parser(this);
		}
		
		
		public static void __hx_ctor_haxe_xml_Parser(global::haxe.xml.Parser __hx_this) {
		}
		
		
		public static global::haxe.ds.StringMap<object> escapes;
		
		public static global::Xml parse(string str, global::haxe.lang.Null<bool> strict) {
			bool __temp_strict7 = ( ( ! (strict.hasValue) ) ? (false) : ((strict).@value) );
			global::Xml doc = global::Xml.createDocument();
			global::haxe.xml.Parser.doParse(str, __temp_strict7, new global::haxe.lang.Null<int>(0, true), doc);
			return doc;
		}
		
		
		public static int doParse(string str, bool strict, global::haxe.lang.Null<int> p, global::Xml parent) {
			unchecked {
				int __temp_p8 = ( ( ! (p.hasValue) ) ? (0) : ((p).@value) );
				global::Xml xml = null;
				int state = 1;
				int next = 1;
				string aname = null;
				int start = 0;
				int nsubs = 0;
				int nbrackets = 0;
				int c = ( (((bool) (( ((uint) (__temp_p8) ) < str.Length )) )) ? (((int) (str[__temp_p8]) )) : (-1) );
				global::StringBuf buf = new global::StringBuf();
				int escapeNext = 1;
				int attrValQuote = -1;
				while (( c != -1 )) {
					switch (state) {
						case 0:
						{
							switch (c) {
								case 9:
								case 10:
								case 13:
								case 32:
								{
									break;
								}
								
								
								default:
								{
									state = next;
									continue;
								}
								
							}
							
							break;
						}
						
						
						case 1:
						{
							if (( c == 60 )) {
								state = 0;
								next = 2;
							}
							else {
								start = __temp_p8;
								state = 13;
								continue;
							}
							
							break;
						}
						
						
						case 2:
						{
							switch (c) {
								case 33:
								{
									int index = ( __temp_p8 + 1 );
									if (( (( (((bool) (( ((uint) (index) ) < str.Length )) )) ? (((int) (str[index]) )) : (-1) )) == 91 )) {
										__temp_p8 += 2;
										if ( ! (string.Equals(global::haxe.lang.StringExt.substr(str, __temp_p8, new global::haxe.lang.Null<int>(6, true)).ToUpperInvariant(), "CDATA[")) ) {
											throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Expected <![CDATA[", str, __temp_p8));
										}
										
										__temp_p8 += 5;
										state = 17;
										start = ( __temp_p8 + 1 );
									}
									else {
										bool tmp = default(bool);
										int index1 = ( __temp_p8 + 1 );
										if (( (( (((bool) (( ((uint) (index1) ) < str.Length )) )) ? (((int) (str[index1]) )) : (-1) )) != 68 )) {
											int index2 = ( __temp_p8 + 1 );
											tmp = ( (( (((bool) (( ((uint) (index2) ) < str.Length )) )) ? (((int) (str[index2]) )) : (-1) )) == 100 );
										}
										else {
											tmp = true;
										}
										
										if (tmp) {
											if ( ! (string.Equals(global::haxe.lang.StringExt.substr(str, ( __temp_p8 + 2 ), new global::haxe.lang.Null<int>(6, true)).ToUpperInvariant(), "OCTYPE")) ) {
												throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Expected <!DOCTYPE", str, __temp_p8));
											}
											
											__temp_p8 += 8;
											state = 16;
											start = ( __temp_p8 + 1 );
										}
										else {
											bool tmp1 = default(bool);
											int index3 = ( __temp_p8 + 1 );
											if (( (( (((bool) (( ((uint) (index3) ) < str.Length )) )) ? (((int) (str[index3]) )) : (-1) )) == 45 )) {
												int index4 = ( __temp_p8 + 2 );
												tmp1 = ( (( (((bool) (( ((uint) (index4) ) < str.Length )) )) ? (((int) (str[index4]) )) : (-1) )) != 45 );
											}
											else {
												tmp1 = true;
											}
											
											if (tmp1) {
												throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Expected <!--", str, __temp_p8));
											}
											else {
												__temp_p8 += 2;
												state = 15;
												start = ( __temp_p8 + 1 );
											}
											
										}
										
									}
									
									break;
								}
								
								
								case 47:
								{
									if (( parent == null )) {
										throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Expected node name", str, __temp_p8));
									}
									
									start = ( __temp_p8 + 1 );
									state = 0;
									next = 10;
									break;
								}
								
								
								case 63:
								{
									state = 14;
									start = __temp_p8;
									break;
								}
								
								
								default:
								{
									state = 3;
									start = __temp_p8;
									continue;
								}
								
							}
							
							break;
						}
						
						
						case 3:
						{
							if ( ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) ))) ) {
								if (( __temp_p8 == start )) {
									throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Expected node name", str, __temp_p8));
								}
								
								xml = global::Xml.createElement(global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( __temp_p8 - start ), true)));
								{
									parent.addChild(xml);
									 ++ nsubs;
								}
								
								state = 0;
								next = 4;
								continue;
							}
							
							break;
						}
						
						
						case 4:
						{
							switch (c) {
								case 47:
								{
									state = 11;
									break;
								}
								
								
								case 62:
								{
									state = 9;
									break;
								}
								
								
								default:
								{
									state = 5;
									start = __temp_p8;
									continue;
								}
								
							}
							
							break;
						}
						
						
						case 5:
						{
							if ( ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) ))) ) {
								string tmp2 = null;
								if (( start == __temp_p8 )) {
									throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Expected attribute name", str, __temp_p8));
								}
								
								tmp2 = global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( __temp_p8 - start ), true));
								aname = tmp2;
								if (xml.exists(aname)) {
									throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Duplicate attribute [", aname), "]"), str, __temp_p8));
								}
								
								state = 0;
								next = 6;
								continue;
							}
							
							break;
						}
						
						
						case 6:
						{
							if (( c == 61 )) {
								state = 0;
								next = 7;
							}
							else {
								throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Expected =", str, __temp_p8));
							}
							
							break;
						}
						
						
						case 7:
						{
							switch (c) {
								case 34:
								case 39:
								{
									buf = new global::StringBuf();
									state = 8;
									start = ( __temp_p8 + 1 );
									attrValQuote = c;
									break;
								}
								
								
								default:
								{
									throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Expected \"", str, __temp_p8));
								}
								
							}
							
							break;
						}
						
						
						case 8:
						{
							switch (c) {
								case 38:
								{
									{
										global::haxe.lang.Null<int> len = new global::haxe.lang.Null<int>(( __temp_p8 - start ), true);
										buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len.hasValue) ) ? (( str.Length - start )) : ((len).@value) )) ));
									}
									
									state = 18;
									escapeNext = 8;
									start = ( __temp_p8 + 1 );
									break;
								}
								
								
								case 60:
								case 62:
								{
									if (strict) {
										throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Invalid unescaped ", new string(((char) (c) ), 1)), " in attribute value"), str, __temp_p8));
									}
									else if (( c == attrValQuote )) {
										{
											global::haxe.lang.Null<int> len1 = new global::haxe.lang.Null<int>(( __temp_p8 - start ), true);
											buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len1.hasValue) ) ? (( str.Length - start )) : ((len1).@value) )) ));
										}
										
										string val = buf.b.ToString();
										buf = new global::StringBuf();
										xml.@set(aname, val);
										state = 0;
										next = 4;
									}
									
									break;
								}
								
								
								default:
								{
									if (( c == attrValQuote )) {
										{
											global::haxe.lang.Null<int> len2 = new global::haxe.lang.Null<int>(( __temp_p8 - start ), true);
											buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len2.hasValue) ) ? (( str.Length - start )) : ((len2).@value) )) ));
										}
										
										string val1 = buf.b.ToString();
										buf = new global::StringBuf();
										xml.@set(aname, val1);
										state = 0;
										next = 4;
									}
									
									break;
								}
								
							}
							
							break;
						}
						
						
						case 9:
						{
							__temp_p8 = global::haxe.xml.Parser.doParse(str, strict, new global::haxe.lang.Null<int>(__temp_p8, true), xml);
							start = __temp_p8;
							state = 1;
							break;
						}
						
						
						case 10:
						{
							if ( ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) ))) ) {
								if (( start == __temp_p8 )) {
									throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Expected node name", str, __temp_p8));
								}
								
								string v = global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( __temp_p8 - start ), true));
								if (( parent.nodeType != global::Xml.Element )) {
									throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::haxe.lang.Runtime.toString(parent.nodeType)));
								}
								
								if ( ! (string.Equals(v, parent.nodeName)) ) {
									if (( parent.nodeType != global::Xml.Element )) {
										throw global::haxe.lang.HaxeException.wrap(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::haxe.lang.Runtime.toString(parent.nodeType)));
									}
									
									throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Expected </", parent.nodeName), ">"), str, __temp_p8));
								}
								
								state = 0;
								next = 12;
								continue;
							}
							
							break;
						}
						
						
						case 11:
						{
							if (( c == 62 )) {
								state = 1;
							}
							else {
								throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Expected >", str, __temp_p8));
							}
							
							break;
						}
						
						
						case 12:
						{
							if (( c == 62 )) {
								if (( nsubs == 0 )) {
									parent.addChild(global::Xml.createPCData(""));
								}
								
								return __temp_p8;
							}
							else {
								throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Expected >", str, __temp_p8));
							}
							
						}
						
						
						case 13:
						{
							if (( c == 60 )) {
								{
									global::haxe.lang.Null<int> len3 = new global::haxe.lang.Null<int>(( __temp_p8 - start ), true);
									buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len3.hasValue) ) ? (( str.Length - start )) : ((len3).@value) )) ));
								}
								
								global::Xml child = global::Xml.createPCData(buf.b.ToString());
								buf = new global::StringBuf();
								{
									parent.addChild(child);
									 ++ nsubs;
								}
								
								state = 0;
								next = 2;
							}
							else if (( c == 38 )) {
								{
									global::haxe.lang.Null<int> len4 = new global::haxe.lang.Null<int>(( __temp_p8 - start ), true);
									buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len4.hasValue) ) ? (( str.Length - start )) : ((len4).@value) )) ));
								}
								
								state = 18;
								escapeNext = 13;
								start = ( __temp_p8 + 1 );
							}
							
							break;
						}
						
						
						case 14:
						{
							bool tmp3 = default(bool);
							if (( c == 63 )) {
								int index5 = ( __temp_p8 + 1 );
								tmp3 = ( (( (((bool) (( ((uint) (index5) ) < str.Length )) )) ? (((int) (str[index5]) )) : (-1) )) == 62 );
							}
							else {
								tmp3 = false;
							}
							
							if (tmp3) {
								 ++ __temp_p8;
								string str1 = global::haxe.lang.StringExt.substr(str, ( start + 1 ), new global::haxe.lang.Null<int>(( ( __temp_p8 - start ) - 2 ), true));
								{
									parent.addChild(global::Xml.createProcessingInstruction(str1));
									 ++ nsubs;
								}
								
								state = 1;
							}
							
							break;
						}
						
						
						case 15:
						{
							bool tmp4 = default(bool);
							bool tmp5 = default(bool);
							if (( c == 45 )) {
								int index6 = ( __temp_p8 + 1 );
								tmp5 = ( (( (((bool) (( ((uint) (index6) ) < str.Length )) )) ? (((int) (str[index6]) )) : (-1) )) == 45 );
							}
							else {
								tmp5 = false;
							}
							
							if (tmp5) {
								int index7 = ( __temp_p8 + 2 );
								tmp4 = ( (( (((bool) (( ((uint) (index7) ) < str.Length )) )) ? (((int) (str[index7]) )) : (-1) )) == 62 );
							}
							else {
								tmp4 = false;
							}
							
							if (tmp4) {
								{
									parent.addChild(global::Xml.createComment(global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( __temp_p8 - start ), true))));
									 ++ nsubs;
								}
								
								__temp_p8 += 2;
								state = 1;
							}
							
							break;
						}
						
						
						case 16:
						{
							if (( c == 91 )) {
								 ++ nbrackets;
							}
							else if (( c == 93 )) {
								 -- nbrackets;
							}
							else if (( ( c == 62 ) && ( nbrackets == 0 ) )) {
								{
									parent.addChild(global::Xml.createDocType(global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( __temp_p8 - start ), true))));
									 ++ nsubs;
								}
								
								state = 1;
							}
							
							break;
						}
						
						
						case 17:
						{
							bool tmp6 = default(bool);
							bool tmp7 = default(bool);
							if (( c == 93 )) {
								int index8 = ( __temp_p8 + 1 );
								tmp7 = ( (( (((bool) (( ((uint) (index8) ) < str.Length )) )) ? (((int) (str[index8]) )) : (-1) )) == 93 );
							}
							else {
								tmp7 = false;
							}
							
							if (tmp7) {
								int index9 = ( __temp_p8 + 2 );
								tmp6 = ( (( (((bool) (( ((uint) (index9) ) < str.Length )) )) ? (((int) (str[index9]) )) : (-1) )) == 62 );
							}
							else {
								tmp6 = false;
							}
							
							if (tmp6) {
								global::Xml child1 = global::Xml.createCData(global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( __temp_p8 - start ), true)));
								{
									parent.addChild(child1);
									 ++ nsubs;
								}
								
								__temp_p8 += 2;
								state = 1;
							}
							
							break;
						}
						
						
						case 18:
						{
							if (( c == 59 )) {
								string s = global::haxe.lang.StringExt.substr(str, start, new global::haxe.lang.Null<int>(( __temp_p8 - start ), true));
								if (( (( (((bool) (( ((uint) (0) ) < s.Length )) )) ? (((int) (s[0]) )) : (-1) )) == 35 )) {
									global::haxe.lang.Null<int> c1 = ( (( (( (((bool) (( ((uint) (1) ) < s.Length )) )) ? (((int) (s[1]) )) : (-1) )) == 120 )) ? (global::Std.parseInt(global::haxe.lang.Runtime.concat("0", global::haxe.lang.StringExt.substr(s, 1, new global::haxe.lang.Null<int>(( s.Length - 1 ), true))))) : (global::Std.parseInt(global::haxe.lang.StringExt.substr(s, 1, new global::haxe.lang.Null<int>(( s.Length - 1 ), true)))) );
									buf.b.Append(((char) ((c1).@value) ));
								}
								else if ( ! (global::haxe.xml.Parser.escapes.exists(s)) ) {
									if (strict) {
										throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException(global::haxe.lang.Runtime.concat("Undefined entity: ", s), str, __temp_p8));
									}
									
									buf.b.Append(((string) (global::Std.@string(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("&", s), ";"))) ));
								}
								else {
									string x = global::haxe.lang.Runtime.toString((global::haxe.xml.Parser.escapes.@get(s)).toDynamic());
									buf.b.Append(((string) (global::Std.@string(x)) ));
								}
								
								start = ( __temp_p8 + 1 );
								state = escapeNext;
							}
							else if ((  ! ((( ( ( ( ( ( ( ( c >= 97 ) && ( c <= 122 ) ) || ( ( c >= 65 ) && ( c <= 90 ) ) ) || ( ( c >= 48 ) && ( c <= 57 ) ) ) || ( c == 58 ) ) || ( c == 46 ) ) || ( c == 95 ) ) || ( c == 45 ) )))  && ( c != 35 ) )) {
								if (strict) {
									throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException(global::haxe.lang.Runtime.concat("Invalid character in entity: ", new string(((char) (c) ), 1)), str, __temp_p8));
								}
								
								buf.b.Append(((char) (38) ));
								{
									global::haxe.lang.Null<int> len5 = new global::haxe.lang.Null<int>(( __temp_p8 - start ), true);
									buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len5.hasValue) ) ? (( str.Length - start )) : ((len5).@value) )) ));
								}
								
								start = __temp_p8--;
								state = escapeNext;
							}
							
							break;
						}
						
						
					}
					
					int index10 =  ++ __temp_p8;
					if (((bool) (( ((uint) (index10) ) < str.Length )) )) {
						c = ((int) (str[index10]) );
					}
					else {
						c = -1;
					}
					
				}
				
				if (( state == 1 )) {
					start = __temp_p8;
					state = 13;
				}
				
				if (( state == 13 )) {
					if (( ( __temp_p8 != start ) || ( nsubs == 0 ) )) {
						{
							global::haxe.lang.Null<int> len6 = new global::haxe.lang.Null<int>(( __temp_p8 - start ), true);
							buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len6.hasValue) ) ? (( str.Length - start )) : ((len6).@value) )) ));
						}
						
						{
							parent.addChild(global::Xml.createPCData(buf.b.ToString()));
							 ++ nsubs;
						}
						
					}
					
					return __temp_p8;
				}
				
				if (( (  ! (strict)  && ( state == 18 ) ) && ( escapeNext == 13 ) )) {
					buf.b.Append(((char) (38) ));
					{
						global::haxe.lang.Null<int> len7 = new global::haxe.lang.Null<int>(( __temp_p8 - start ), true);
						buf.b.Append(((string) (str) ), ((int) (start) ), ((int) (( ( ! (len7.hasValue) ) ? (( str.Length - start )) : ((len7).@value) )) ));
					}
					
					{
						parent.addChild(global::Xml.createPCData(buf.b.ToString()));
						 ++ nsubs;
					}
					
					return __temp_p8;
				}
				
				throw global::haxe.lang.HaxeException.wrap(new global::haxe.xml.XmlParserException("Unexpected end", str, __temp_p8));
			}
		}
		
		
	}
}


