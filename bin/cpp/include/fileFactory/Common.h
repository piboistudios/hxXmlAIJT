// Generated by Haxe 3.4.7
#ifndef INCLUDED_fileFactory_Common
#define INCLUDED_fileFactory_Common

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(EReg)
HX_DECLARE_CLASS1(fileFactory,Common)

namespace fileFactory{


class HXCPP_CLASS_ATTRIBUTES Common_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Common_obj OBJ_;
		Common_obj();

	public:
		enum { _hx_ClassId = 0x3a7a87b9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="fileFactory.Common")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"fileFactory.Common"); }

		hx::ObjectPtr< Common_obj > __new() {
			hx::ObjectPtr< Common_obj > __this = new Common_obj();
			__this->__construct();
			return __this;
		}

		static hx::ObjectPtr< Common_obj > __alloc(hx::Ctx *_hx_ctx) {
			Common_obj *__this = (Common_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Common_obj), false, "fileFactory.Common"));
			*(void **)__this = Common_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Common_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_HCSTRING("Common","\x4b","\xe9","\xc2","\xfb"); }

		static void __boot();
		static ::String _hx_EOF;
		static  ::EReg xmlFormatRegEx;
};

} // end namespace fileFactory

#endif /* INCLUDED_fileFactory_Common */ 
