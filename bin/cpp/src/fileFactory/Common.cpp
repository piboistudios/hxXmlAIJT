// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_EReg
#include <EReg.h>
#endif
#ifndef INCLUDED_fileFactory_Common
#include <fileFactory/Common.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_4195329db9385ba7_4_boot,"fileFactory.Common","boot",0xcaf3b775,"fileFactory.Common.boot","fileFactory/Common.hx",4,0x82b49f72)
HX_LOCAL_STACK_FRAME(_hx_pos_4195329db9385ba7_5_boot,"fileFactory.Common","boot",0xcaf3b775,"fileFactory.Common.boot","fileFactory/Common.hx",5,0x82b49f72)
namespace fileFactory{

void Common_obj::__construct() { }

Dynamic Common_obj::__CreateEmpty() { return new Common_obj; }

void *Common_obj::_hx_vtable = 0;

Dynamic Common_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Common_obj > _hx_result = new Common_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Common_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3a7a87b9;
}

::String Common_obj::_hx_EOF;

 ::EReg Common_obj::xmlFormatRegEx;


Common_obj::Common_obj()
{
}

bool Common_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"EOF") ) { outValue = ( _hx_EOF ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"xmlFormatRegEx") ) { outValue = ( xmlFormatRegEx ); return true; }
	}
	return false;
}

bool Common_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"EOF") ) { _hx_EOF=ioValue.Cast< ::String >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"xmlFormatRegEx") ) { xmlFormatRegEx=ioValue.Cast<  ::EReg >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Common_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Common_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Common_obj::_hx_EOF,HX_HCSTRING("EOF","\x9c","\xa0","\x34","\x00")},
	{hx::fsObject /*::EReg*/ ,(void *) &Common_obj::xmlFormatRegEx,HX_HCSTRING("xmlFormatRegEx","\x99","\xc7","\x01","\x35")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Common_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Common_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(Common_obj::_hx_EOF,"EOF");
	HX_MARK_MEMBER_NAME(Common_obj::xmlFormatRegEx,"xmlFormatRegEx");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Common_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Common_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(Common_obj::_hx_EOF,"EOF");
	HX_VISIT_MEMBER_NAME(Common_obj::xmlFormatRegEx,"xmlFormatRegEx");
};

#endif

hx::Class Common_obj::__mClass;

static ::String Common_obj_sStaticFields[] = {
	HX_HCSTRING("EOF","\x9c","\xa0","\x34","\x00"),
	HX_HCSTRING("xmlFormatRegEx","\x99","\xc7","\x01","\x35"),
	::String(null())
};

void Common_obj::__register()
{
	hx::Object *dummy = new Common_obj;
	Common_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("fileFactory.Common","\x0b","\xf4","\xce","\x21");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Common_obj::__GetStatic;
	__mClass->mSetStaticField = &Common_obj::__SetStatic;
	__mClass->mMarkFunc = Common_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Common_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Common_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Common_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Common_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Common_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Common_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_4195329db9385ba7_4_boot)
HXDLIN(   4)		_hx_EOF = HX_("@$#!#@!@#$!@#~@#!@$!@$@#$!#$%!$#%!#$%!#$%!",8e,95,cd,09);
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_4195329db9385ba7_5_boot)
HXDLIN(   5)		xmlFormatRegEx =  ::EReg_obj::__alloc( HX_CTX ,HX_("(<[.]+>)",e0,dd,6b,cb),HX_("i",69,00,00,00));
            	}
}

} // end namespace fileFactory
