// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_fileFactory_Common
#include <fileFactory/Common.h>
#endif
#ifndef INCLUDED_fileFactory_InputTools
#include <fileFactory/InputTools.h>
#endif
#ifndef INCLUDED_haxe_io_Eof
#include <haxe/io/Eof.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_sys_io_FileInput
#include <sys/io/FileInput.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fce016c6f13d2331_7_tryReadUntil,"fileFactory.InputTools","tryReadUntil",0xe768faaa,"fileFactory.InputTools.tryReadUntil","fileFactory/InputTools.hx",7,0x3ab2be2c)
HX_LOCAL_STACK_FRAME(_hx_pos_fce016c6f13d2331_18_tryReadLine,"fileFactory.InputTools","tryReadLine",0x36c4db68,"fileFactory.InputTools.tryReadLine","fileFactory/InputTools.hx",18,0x3ab2be2c)
namespace fileFactory{

void InputTools_obj::__construct() { }

Dynamic InputTools_obj::__CreateEmpty() { return new InputTools_obj; }

void *InputTools_obj::_hx_vtable = 0;

Dynamic InputTools_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< InputTools_obj > _hx_result = new InputTools_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool InputTools_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x249be377;
}

::String InputTools_obj::tryReadUntil( ::sys::io::FileInput file,int end){
            	HX_STACKFRAME(&_hx_pos_fce016c6f13d2331_7_tryReadUntil)
HXDLIN(   7)		try {
            			HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE(   9)			return file->readUntil(end);
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::io::Eof e = _hx_e;
HXLINE(  13)				return ::fileFactory::Common_obj::_hx_EOF;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(   7)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(InputTools_obj,tryReadUntil,return )

::String InputTools_obj::tryReadLine( ::sys::io::FileInput file){
            	HX_STACKFRAME(&_hx_pos_fce016c6f13d2331_18_tryReadLine)
HXDLIN(  18)		try {
            			HX_STACK_CATCHABLE( ::haxe::io::Eof, 0);
HXLINE(  20)			return file->readLine();
            		}
            		catch( ::Dynamic _hx_e){
            			if (_hx_e.IsClass<  ::haxe::io::Eof >() ){
            				HX_STACK_BEGIN_CATCH
            				 ::haxe::io::Eof e = _hx_e;
HXLINE(  24)				return ::fileFactory::Common_obj::_hx_EOF;
            			}
            			else {
            				HX_STACK_DO_THROW(_hx_e);
            			}
            		}
HXLINE(  18)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(InputTools_obj,tryReadLine,return )


InputTools_obj::InputTools_obj()
{
}

bool InputTools_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"tryReadLine") ) { outValue = tryReadLine_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"tryReadUntil") ) { outValue = tryReadUntil_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *InputTools_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *InputTools_obj_sStaticStorageInfo = 0;
#endif

static void InputTools_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(InputTools_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void InputTools_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(InputTools_obj::__mClass,"__mClass");
};

#endif

hx::Class InputTools_obj::__mClass;

static ::String InputTools_obj_sStaticFields[] = {
	HX_HCSTRING("tryReadUntil","\xad","\xfc","\xa5","\x2a"),
	HX_HCSTRING("tryReadLine","\xc5","\x4a","\x69","\x03"),
	::String(null())
};

void InputTools_obj::__register()
{
	hx::Object *dummy = new InputTools_obj;
	InputTools_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("fileFactory.InputTools","\x91","\xc8","\xe2","\x33");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &InputTools_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = InputTools_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(InputTools_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< InputTools_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = InputTools_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = InputTools_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = InputTools_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace fileFactory
