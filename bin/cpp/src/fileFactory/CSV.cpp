// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_fileFactory_CSV
#include <fileFactory/CSV.h>
#endif
#ifndef INCLUDED_fileFactory_Common
#include <fileFactory/Common.h>
#endif
#ifndef INCLUDED_fileFactory_InputTools
#include <fileFactory/InputTools.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif
#ifndef INCLUDED_sys_io_FileInput
#include <sys/io/FileInput.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_762bea88314705c5_7_run,"fileFactory.CSV","run",0xd96effc3,"fileFactory.CSV.run","fileFactory/CSV.hx",7,0x1cc87059)
namespace fileFactory{

void CSV_obj::__construct() { }

Dynamic CSV_obj::__CreateEmpty() { return new CSV_obj; }

void *CSV_obj::_hx_vtable = 0;

Dynamic CSV_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< CSV_obj > _hx_result = new CSV_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CSV_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1da85078;
}

::cpp::VirtualArray CSV_obj::run( ::Dynamic input){
            	HX_STACKFRAME(&_hx_pos_762bea88314705c5_7_run)
HXLINE(   8)		 ::Dynamic _file = null();
HXDLIN(   8)		::cpp::VirtualArray out = ::cpp::VirtualArray_obj::__new();
HXLINE(   9)		if (hx::IsEq( ::Type_obj::getClass(input),hx::ClassOf< ::String >() )) {
HXLINE(  11)			_file = ::sys::io::File_obj::read(( (::String)(input) ),null());
            		}
HXLINE(  13)		 ::sys::io::FileInput file = ( ( ::sys::io::FileInput)(_file) );
HXLINE(  16)		while(true){
HXLINE(  18)			::String pk = ::fileFactory::InputTools_obj::tryReadLine(file);
HXLINE(  19)			if ((pk == ::fileFactory::Common_obj::_hx_EOF)) {
HXLINE(  22)				return out;
            			}
HXLINE(  24)			out->push(pk);
            		}
HXLINE(  16)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CSV_obj,run,return )


CSV_obj::CSV_obj()
{
}

bool CSV_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"run") ) { outValue = run_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *CSV_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *CSV_obj_sStaticStorageInfo = 0;
#endif

static void CSV_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(CSV_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void CSV_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(CSV_obj::__mClass,"__mClass");
};

#endif

hx::Class CSV_obj::__mClass;

static ::String CSV_obj_sStaticFields[] = {
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null())
};

void CSV_obj::__register()
{
	hx::Object *dummy = new CSV_obj;
	CSV_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("fileFactory.CSV","\xe6","\xdc","\xe8","\x90");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CSV_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = CSV_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(CSV_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< CSV_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = CSV_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CSV_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CSV_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace fileFactory
