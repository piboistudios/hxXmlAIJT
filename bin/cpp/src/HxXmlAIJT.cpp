// Generated by Haxe 3.4.7
#include <hxcpp.h>

#ifndef INCLUDED_HxXmlAIJT
#include <HxXmlAIJT.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Xml
#include <Xml.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_f91efbe464ffa0bc_8_genOut,"HxXmlAIJT","genOut",0x9adde9f3,"HxXmlAIJT.genOut","HxXmlAIJT.hx",8,0x8414c4a5)
HX_LOCAL_STACK_FRAME(_hx_pos_f91efbe464ffa0bc_12_convertArray,"HxXmlAIJT","convertArray",0x78dc847b,"HxXmlAIJT.convertArray","HxXmlAIJT.hx",12,0x8414c4a5)
HX_LOCAL_STACK_FRAME(_hx_pos_f91efbe464ffa0bc_26_run,"HxXmlAIJT","run",0x0e1ee016,"HxXmlAIJT.run","HxXmlAIJT.hx",26,0x8414c4a5)

void HxXmlAIJT_obj::__construct() { }

Dynamic HxXmlAIJT_obj::__CreateEmpty() { return new HxXmlAIJT_obj; }

void *HxXmlAIJT_obj::_hx_vtable = 0;

Dynamic HxXmlAIJT_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< HxXmlAIJT_obj > _hx_result = new HxXmlAIJT_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool HxXmlAIJT_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5e4757b9;
}

 ::Xml HxXmlAIJT_obj::out;

void HxXmlAIJT_obj::genOut(){
            	HX_STACKFRAME(&_hx_pos_f91efbe464ffa0bc_8_genOut)
HXDLIN(   8)		::HxXmlAIJT_obj::out = ::Xml_obj::createElement(HX_("Query",e8,fa,17,f1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(HxXmlAIJT_obj,genOut,(void))

void HxXmlAIJT_obj::convertArray(::cpp::VirtualArray input){
            	HX_STACKFRAME(&_hx_pos_f91efbe464ffa0bc_12_convertArray)
HXLINE(  13)		 ::Xml joinTable = ::Xml_obj::createElement(HX_("JT",ca,40,00,00));
HXLINE(  14)		{
HXLINE(  14)			int _g1 = (int)0;
HXDLIN(  14)			int _g = input->get_length();
HXDLIN(  14)			while((_g1 < _g)){
HXLINE(  14)				_g1 = (_g1 + (int)1);
HXDLIN(  14)				int i = (_g1 - (int)1);
HXLINE(  16)				 ::Xml pk = ::Xml_obj::parse(HX_("<jr></jr>",e9,c5,93,19))->firstElement();
HXLINE(  17)				pk->set(HX_("index",12,9b,14,be),::Std_obj::string(i));
HXLINE(  18)				{
HXLINE(  18)					bool _hx_tmp;
HXDLIN(  18)					if ((pk->nodeType != ::Xml_obj::Document)) {
HXLINE(  18)						_hx_tmp = (pk->nodeType != ::Xml_obj::Element);
            					}
            					else {
HXLINE(  18)						_hx_tmp = false;
            					}
HXDLIN(  18)					if (_hx_tmp) {
HXLINE(  18)						HX_STACK_DO_THROW((HX_("Bad node type, expected Element or Document but found ",a0,d6,ba,79) + pk->nodeType));
            					}
HXDLIN(  18)					 ::Xml _this = pk->children->__get((int)0).StaticCast<  ::Xml >();
HXDLIN(  18)					::String v = ::Std_obj::string(input->__get(i));
HXDLIN(  18)					bool _hx_tmp1;
HXDLIN(  18)					if ((_this->nodeType != ::Xml_obj::Document)) {
HXLINE(  18)						_hx_tmp1 = (_this->nodeType == ::Xml_obj::Element);
            					}
            					else {
HXLINE(  18)						_hx_tmp1 = true;
            					}
HXDLIN(  18)					if (_hx_tmp1) {
HXLINE(  18)						HX_STACK_DO_THROW((HX_("Bad node type, unexpected ",be,79,d5,11) + _this->nodeType));
            					}
HXDLIN(  18)					_this->nodeValue = v;
            				}
HXLINE(  19)				joinTable->addChild(pk);
            			}
            		}
HXLINE(  21)		 ::Xml xmlData = ::Xml_obj::createElement(HX_("XmlData",81,4f,ca,3c));
HXLINE(  22)		xmlData->addChild(joinTable);
HXLINE(  23)		::HxXmlAIJT_obj::out->addChild(xmlData);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HxXmlAIJT_obj,convertArray,(void))

 ::Xml HxXmlAIJT_obj::run(::cpp::VirtualArray input){
            	HX_STACKFRAME(&_hx_pos_f91efbe464ffa0bc_26_run)
HXLINE(  27)		::HxXmlAIJT_obj::genOut();
HXLINE(  28)		::HxXmlAIJT_obj::convertArray(input);
HXLINE(  29)		return ::HxXmlAIJT_obj::out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(HxXmlAIJT_obj,run,return )


HxXmlAIJT_obj::HxXmlAIJT_obj()
{
}

bool HxXmlAIJT_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"out") ) { outValue = ( out ); return true; }
		if (HX_FIELD_EQ(inName,"run") ) { outValue = run_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"genOut") ) { outValue = genOut_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"convertArray") ) { outValue = convertArray_dyn(); return true; }
	}
	return false;
}

bool HxXmlAIJT_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"out") ) { out=ioValue.Cast<  ::Xml >(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *HxXmlAIJT_obj_sMemberStorageInfo = 0;
static hx::StaticInfo HxXmlAIJT_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*::Xml*/ ,(void *) &HxXmlAIJT_obj::out,HX_HCSTRING("out","\x8e","\xa0","\x54","\x00")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void HxXmlAIJT_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(HxXmlAIJT_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(HxXmlAIJT_obj::out,"out");
};

#ifdef HXCPP_VISIT_ALLOCS
static void HxXmlAIJT_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(HxXmlAIJT_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(HxXmlAIJT_obj::out,"out");
};

#endif

hx::Class HxXmlAIJT_obj::__mClass;

static ::String HxXmlAIJT_obj_sStaticFields[] = {
	HX_HCSTRING("out","\x8e","\xa0","\x54","\x00"),
	HX_HCSTRING("genOut","\xde","\x91","\x2c","\x9f"),
	HX_HCSTRING("convertArray","\xa6","\x6e","\x56","\x58"),
	HX_HCSTRING("run","\x4b","\xe7","\x56","\x00"),
	::String(null())
};

void HxXmlAIJT_obj::__register()
{
	hx::Object *dummy = new HxXmlAIJT_obj;
	HxXmlAIJT_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("HxXmlAIJT","\xb9","\x57","\x47","\x5e");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &HxXmlAIJT_obj::__GetStatic;
	__mClass->mSetStaticField = &HxXmlAIJT_obj::__SetStatic;
	__mClass->mMarkFunc = HxXmlAIJT_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(HxXmlAIJT_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< HxXmlAIJT_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = HxXmlAIJT_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HxXmlAIJT_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HxXmlAIJT_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

